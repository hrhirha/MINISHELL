
segfault : 
			export dsfsafds sdfdsaf dsfadsfs adsfds
			export A=a B=b C=c D=d E=e F=f G=g H=h I=i J=j K=k L=lM=m N=n O=o P=p Q=q R=r S=s T=t U=u V=v W=w X=x Y=y Z=z;




export 
unset

export HOME => dont update it if value = empty





=========== Hamza ======================
set PWD, OLDPWD on start up
===========================================








===========================================

echo -nnnnnnnn kjkljk
env don't show those who doesn't have "="
set $OLDPWD
leaks
mkdir test_dir ; cd test_dir ;  rm -rf ../test_dir ;  cd . ; echo $OLDPWD ; echo $PWD
< a ; echo hi

===========================================












main2.c : 
int		commands_loop2(t_minishell *minishell, t_list *my_pipe)
{
	t_list		*current;
	int			status;
	t_command	*command;

	status = 1;
	command = (t_command*)my_pipe->content;
	status = loop_redirections(minishell, command);
	if (status < 0)
		// return (-1);
		return (1);
	status = shell_execute(minishell, command);
	if (status == 0)
		return (0);
	reset_std(minishell);
	return (1);
}





- main4.c
int		loop_redirections2(t_redirection *redirection)
{
	int	fd;

	if (redirection->type == LEFT_REDIR).
	{
		fd = read_file(redirection->file_name);
		if (fd < 0)
			return (-1);
		dup2(fd, STDIN_FILENO);
		close(fd);
	}
	else
	{
		if (redirection->type == RIGHT_REDIR)
			fd = create_empty_file(redirection->file_name);
		else
			fd = create_append_file(redirection->file_name);
		if (fd < 0)
			return (-1);
		dup2(fd, STDOUT_FILENO);
		close(fd);
	}
	return (0);
}







































-------


- exit with status code
- "cd" and "cd ;" and "cd;" 
- ==> ./a.out doesn't execute a.out
> f1



> create file, >> create file if not exist if it exists then append to it
< read from file



- remove test from all files (test.c, remove it from Makefile, remove all function that are in test.c )

use signals in get_next_line()
		: getNextLine should return only when '\n', DO NOT return when EOF (user typed Ctrl-D)

--------------------------------
--------------------------------
- execute using ( relative or absolute path )
- don't exit when executing a program
- scape ', " when echo a string if they are closed otherwise display an error

- if no ' or " then use \ to escape chars ex: it\'s ==> it's

- echo env variables



- export

- unset

- main.c : commands_loop()
		// TODO: wait until each command is executed


--------------------------------
commits : 5
--------------------------------

- Makefile : compile with flag  FLAGS = -Wall -Wextra -Werror
- Makefile : remove -fsanitize=address

- stty sane

https://www.youtube.com/watch?v=aLjFxiWP5uQ [ok]
https://www.youtube.com/watch?v=c526U0c5Oyo [ok]
https://www.youtube.com/watch?v=NTfOnGZUZDk [ok]
https://www.youtube.com/watch?v=VXO8hzLnJJM [ok]
https://www.youtube.com/watch?v=o8NPllzkFhE [ok] //shell function
https://github.com/torvalds/linux //Linux kernel 
https://computerhistory.org/blog/the-earliest-unix-code-an-anniversary-source-code-release/ //Linux overview [ok]
https://www.freebsd.org/doc/handbook/ //free Bsd handbook [ok]
https://malgouyres.org/tech-for-pros/programmation-systeme // fork,exec,wait... [ok] that's a good resource ðŸ˜ŽðŸ¤©
https://www3.nd.edu/~pbui/teaching/cse.30341.fa17/project06.html // file system [ok]
https://github.com/kalpishs/Unix-Shell-Implementation-in-C // minishell impelmentation in C (good recoure)
https://www.oilshell.org/blog/2019/02/07.html // shell parsing [ok]
https://mywiki.wooledge.org/bashparser // bash parser [ok]
http://www.sfu.ca/~reilande/ // fork and pipe combined [ok]
https://en.wikipedia.org/wiki/Control-%5C // Ctrl-\ [ok]
https://en.wikipedia.org/wiki/End-of-Transmission_character //Ctrl+D [ok]
https://en.wikipedia.org/wiki/Control-C // Ctrl+C [ok]
https://bash.cyberciti.biz/guide/Sending_signal_to_Processes //Sending signal to processes [ok]
https://linux.die.net/man/2/setgid //setgid function [ok] unuseful
https://github.com/orangeduck/mpc // seen
https://github.com/Swoorup/mysh // shell implementation in C
http://www.rozmichelle.com/pipes-forks-dups/ //pipe, fork, dup (important resoures) [ok]
https://catonmat.net/bash-one-liners-explained-part-three // all about redirections
https://medium.com/@imstudio/path-macos-best-practice-for-path-environment-variables-on-mac-os-35ec4076a486 //env variables (PATH)
https://readthedocs.org/projects/sys/downloads/pdf/latest/
https://www.youtube.com/watch?v=xzEd3yojcHo&list=PLWPirh4EWFpGsim4cuJrh9w6-yfuC9XqI
https://www.youtube.com/watch?v=fo2eLcH_aR8
https://www.classcentral.com/course/udacity-advanced-operating-systems-1016?utm_source=fcc_medium&utm_medium=web&utm_campaign=cs_programming_july_2018
https://www.classcentral.com/course/edx-paradigms-of-computer-programming-fundamentals-2298?utm_source=fcc_medium&utm_medium=web&utm_campaign=cs_programming_july_2018
https://www3.nd.edu/~pbui/teaching/cse.30341.fa17/project06.html
http://www.cs.tut.fi/~popl/nykyinen/essays/g25.pdf
http://www.freeinfosociety.com/media/pdf/4597.pdf